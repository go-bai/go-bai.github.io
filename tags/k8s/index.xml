<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>K8s on gobai's blog</title><link>/tags/k8s/</link><description>Recent content in K8s on gobai's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2024 22:07:17 +0800</lastBuildDate><atom:link href="/tags/k8s/index.xml" rel="self" type="application/rss+xml"/><item><title>CSI</title><link>/posts/csi/</link><pubDate>Mon, 04 Nov 2024 22:07:17 +0800</pubDate><guid>/posts/csi/</guid><description>&lt;h2 id="关于-csi">关于 CSI&lt;/h2>
&lt;p>CSI 全称为 &lt;code>Container Storage Interface&lt;/code>, 容器存储接口&lt;/p>
&lt;p>要实现一个第三方的 csi driver 需要实现下面的 gRPC service &lt;a href="https://github.com/container-storage-interface/spec/blob/master/lib/go/csi/csi_grpc.pb.go">csi spec&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-golang">// 如果 NodeServer 和 ControllerServer 对应服务运行在不同 pod 中, 那么两个服务都要实现 IdentityServer
type IdentityServer interface {
 // 用来获取插件名称
 GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
 GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error)
 Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
 mustEmbedUnimplementedIdentityServer()
}

type ControllerServer interface {
 // 创建 volume, 如 ceph 创建一个 rbd 或者 hostpath 创建一个目录
 CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
 // 删除 volume, 如 ceph 删除一个 rbd 或者 hostpath 删除一个目录
 DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
 // 将 volume attach 到 node 上, 如 rbd 通过 rbd map 命令 attach, 成功后 node 上会多出一个 rbdx 的 block 设备
 ControllerPublishVolume(context.Context, *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error)
 // 将 volume 从 node 上 detach, 如 rbd 通过 rbd unmap 命令 detach
 ControllerUnpublishVolume(context.Context, *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error)
 ValidateVolumeCapabilities(context.Context, *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error)
 // 列出所有 volume
 ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
 GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, error)
 ControllerGetCapabilities(context.Context, *ControllerGetCapabilitiesRequest) (*ControllerGetCapabilitiesResponse, error)
 CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
 DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
 ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
 ControllerExpandVolume(context.Context, *ControllerExpandVolumeRequest) (*ControllerExpandVolumeResponse, error)
 ControllerGetVolume(context.Context, *ControllerGetVolumeRequest) (*ControllerGetVolumeResponse, error)
 ControllerModifyVolume(context.Context, *ControllerModifyVolumeRequest) (*ControllerModifyVolumeResponse, error)
 mustEmbedUnimplementedControllerServer()
}

// 这些会被 kubelet 调用
type NodeServer interface {
 // format (如果没format), mount 到 node 的 global directory
 NodeStageVolume(context.Context, *NodeStageVolumeRequest) (*NodeStageVolumeResponse, error)
 // umount
 NodeUnstageVolume(context.Context, *NodeUnstageVolumeRequest) (*NodeUnstageVolumeResponse, error)
 // mount --bind 到 pod directory
 NodePublishVolume(context.Context, *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error)
 // umount --bind
 NodeUnpublishVolume(context.Context, *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error)
 NodeGetVolumeStats(context.Context, *NodeGetVolumeStatsRequest) (*NodeGetVolumeStatsResponse, error)
 NodeExpandVolume(context.Context, *NodeExpandVolumeRequest) (*NodeExpandVolumeResponse, error)
 NodeGetCapabilities(context.Context, *NodeGetCapabilitiesRequest) (*NodeGetCapabilitiesResponse, error)
 NodeGetInfo(context.Context, *NodeGetInfoRequest) (*NodeGetInfoResponse, error)
 mustEmbedUnimplementedNodeServer()
}
&lt;/code>&lt;/pre>
&lt;h2 id="关于-sidecar-containers">关于 Sidecar Containers&lt;/h2>
&lt;p>&lt;a href="https://kubernetes-csi.github.io/docs/sidecar-containers.html">Sidecar Containers&lt;/a> 是一系列标准容器，用于简化 CSI 插件的开发和部署&lt;/p></description></item><item><title>RKE2</title><link>/posts/rke2/</link><pubDate>Mon, 01 Jul 2024 21:24:49 +0800</pubDate><guid>/posts/rke2/</guid><description>&lt;blockquote>
&lt;p>通过RKE2快速搭建测试使用的k8s集群环境&lt;/p>
&lt;/blockquote>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;ol>
&lt;li>准备bridge网络br0&lt;/li>
&lt;li>准备ubuntu 22.04 server qcow2镜像&lt;/li>
&lt;li>准备libvirt环境&lt;/li>
&lt;/ol>
&lt;h3 id="准备bridge网络">准备bridge网络&lt;/h3>
&lt;p>&lt;a href="../creating-a-bridged-network-with-netplan-on-ubuntu-22-04/">Creating a bridged network with netplan on Ubuntu 22.04&lt;/a>&lt;/p>
&lt;h3 id="配置-gen-cloudinit-iso-脚本">配置 gen-cloudinit-iso 脚本&lt;/h3>
&lt;pre>&lt;code class="language-bash">cat &amp;lt;&amp;lt;EOFALL &amp;gt; /usr/bin/gen-cloudinit-iso
#!/bin/bash

set -eux

CLOUD_INIT_DIR=&amp;quot;/var/lib/libvirt/disks/\${VM}/cloudinit&amp;quot;
FILENAME=&amp;quot;\${CLOUD_INIT_DIR}/init.iso&amp;quot;

mkdir -p \${CLOUD_INIT_DIR}

cat &amp;lt;&amp;lt;EOF &amp;gt; \${CLOUD_INIT_DIR}/meta-data
instance-id: \${VM}
local-hostname: \${VM}
EOF

# 更多配置参照 https://cloudinit.readthedocs.io/en/latest/explanation/format.html
cat &amp;lt;&amp;lt;EOF &amp;gt; \${CLOUD_INIT_DIR}/user-data
#cloud-config
EOF

# 参考 kubevirt /pkg/cloud-init/cloud-init.go:defaultIsoFunc
xorrisofs -output \$FILENAME -volid cidata -joliet -rock -partition_cyl_align on \${CLOUD_INIT_DIR}/user-data \${CLOUD_INIT_DIR}/meta-data
EOFALL

chmod +x /usr/bin/gen-cloudinit-iso
&lt;/code>&lt;/pre>
&lt;h2 id="创建虚拟机">创建虚拟机&lt;/h2>
&lt;pre>&lt;code class="language-bash">for vm in &amp;quot;k8s-node01&amp;quot; &amp;quot;k8s-node02&amp;quot;; do
 export VM=${vm}
 # prepare cloudinit iso
 gen-cloudinit-iso
 # prepare sysdisk and datadisk 
 qemu-img create -f qcow2 -F qcow2 -b /var/lib/libvirt/images/ubuntu.qcow2 /var/lib/libvirt/disks/${VM}/sysdisk.qcow2 200G
 qemu-img create -f qcow2 /var/lib/libvirt/disks/${VM}/datadisk01.qcow2 500G
 qemu-img create -f qcow2 /var/lib/libvirt/disks/${VM}/datadisk02.qcow2 500G

 virt-install \
 --name ${VM} \
 --memory 16384 \
 --vcpus 8 \
 --disk /var/lib/libvirt/disks/${VM}/sysdisk.qcow2,device=disk,bus=scsi \
 --disk /var/lib/libvirt/disks/${VM}/datadisk01.qcow2,device=disk,bus=scsi \
 --disk /var/lib/libvirt/disks/${VM}/datadisk02.qcow2,device=disk,bus=scsi \
 --disk /var/lib/libvirt/disks/${VM}/cloudinit/init.iso,device=cdrom,bus=scsi \
 --network bridge=br0 \
 --import \
 --os-variant ubuntu22.10 \
 --noautoconsole
done
&lt;/code>&lt;/pre>
&lt;h2 id="安装-rke2">安装 RKE2&lt;/h2>
&lt;h3 id="脚本在线安装">脚本在线安装&lt;/h3>
&lt;pre>&lt;code class="language-bash"># 初始化 rke2 配置文件
mkdir -p /etc/rancher/rke2
cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/rancher/rke2/config.yaml
write-kubeconfig-mode: &amp;quot;0644&amp;quot;
etcd-expose-metrics: true
disable-cloud-controller: true
cni: calico
EOF

curl -sfL https://rancher-mirror.rancher.cn/rke2/install.sh | INSTALL_RKE2_MIRROR=cn sh -
systemctl enable rke2-server.service
systemctl start rke2-server.service
&lt;/code>&lt;/pre>
&lt;h3 id="离线安装">离线安装&lt;/h3>
&lt;p>TODO&lt;/p></description></item></channel></rss>