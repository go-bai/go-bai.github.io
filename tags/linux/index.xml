<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on gobai's blog</title><link>/tags/linux/</link><description>Recent content in Linux on gobai's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 09 Apr 2024 22:16:24 +0800</lastBuildDate><atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>无线转有线网络</title><link>/posts/wireless-to-wired-network/</link><pubDate>Tue, 09 Apr 2024 22:16:24 +0800</pubDate><guid>/posts/wireless-to-wired-network/</guid><description>&lt;blockquote>
&lt;p>通过无线网卡连接网络&lt;code>A(192.168.31.0/24)&lt;/code>, 无线网卡相当于&lt;code>WAN&lt;/code>口，通过有线网卡接入网络&lt;code>B(192.168.1.0/24)&lt;/code>, 有线网卡相当于&lt;code>LAN&lt;/code>口&lt;/p>
&lt;/blockquote>
&lt;h2 id="准备一个ubuntu虚拟机router">准备一个ubuntu虚拟机&lt;code>router&lt;/code>&lt;/h2>
&lt;pre>&lt;code class="language-bash"># 准备qcow2基础镜像
wget https://down.idc.wiki/Image/realServer-Template/current/qcow2/ubuntu22.qcow2 -O /var/lib/libvirt/images/ubuntu.qcow2
# 创建虚拟机以基础镜像为backing file的增量盘
qemu-img create -f qcow2 -F qcow2 -b /var/lib/libvirt/images/ubuntu.qcow2 /var/lib/libvirt/disks/router.qcow2 20G
# 创建并启动虚拟机
virt-install --name router --memory 512 --vcpus 1 --disk /var/lib/libvirt/disks/router.qcow2,bus=sata --import --os-variant ubuntu22.10 --network bridge=br0 --noautoconsole
# 设置自动启动
virsh autostart router
&lt;/code>&lt;/pre>
&lt;h2 id="配置网络">配置网络&lt;/h2>
&lt;h3 id="将无线网卡透传进虚拟机">将无线网卡透传进虚拟机&lt;/h3>
&lt;p>打开 &lt;code>virt-manager&lt;/code> -&amp;gt; 双击 &lt;code>router domain&lt;/code> -&amp;gt; 点击 &lt;code>Show virtual hardware details&lt;/code> -&amp;gt; 点击 &lt;code>Add Hardware&lt;/code> -&amp;gt; 点击 &lt;code>PCI Host Device&lt;/code> -&amp;gt; 选择 &lt;code>Intel Corporation Wi-Fi 6 AX200&lt;/code> -&amp;gt; 点击 &lt;code>Finish&lt;/code>&lt;/p></description></item><item><title>Shell Script</title><link>/posts/shell-script/</link><pubDate>Sat, 23 Mar 2024 09:43:34 +0800</pubDate><guid>/posts/shell-script/</guid><description>&lt;blockquote>
&lt;p>最近写的shell脚本比较多，记录一些常用命令, 相当于记录一个索引, 以后用时可以快速回忆起来.&lt;/p>
&lt;/blockquote>
&lt;h2 id="binbash">&lt;code>#!/bin/bash&lt;/code>&lt;/h2>
&lt;p>&lt;code>#!/bin/bash&lt;/code>被称为&lt;code>shebang line&lt;/code>, 指定执行此脚本文件时使用&lt;code>/bin/bash&lt;/code>做为shell解释器程序&lt;/p>
&lt;p>很多主流操作系统默认的shell解释器也是bash&lt;/p>
&lt;pre>&lt;code class="language-bash"># echo $SHELL
/bin/bash
&lt;/code>&lt;/pre>
&lt;h2 id="set">&lt;code>set&lt;/code>&lt;/h2>
&lt;p>&lt;code>set&lt;/code>命令用来修改shell环境的运行参数, 完整的可定制的&lt;a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">官方手册&lt;/a>&lt;/p>
&lt;p>下面是我常用的几个, 可以合并为如下内容写在脚本开头:&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/bash
set -uxe
set -o pipefail
&lt;/code>&lt;/pre>
&lt;h3 id="set--u">&lt;code>set -u&lt;/code>&lt;/h3>
&lt;p>执行脚本时, 如果遇到不存在的变量, Bash默认会忽略, &lt;code>set -u&lt;/code>可以让脚本读到不存在变量时报错&lt;/p>
&lt;h3 id="set--x">&lt;code>set -x&lt;/code>&lt;/h3>
&lt;p>命令执行前会先打印出来, 行首以&lt;code>+&lt;/code>表示, 在调试脚本时非常有帮助&lt;/p>
&lt;h3 id="set--e">&lt;code>set -e&lt;/code>&lt;/h3>
&lt;p>执行脚本时, Bash遇到错误默认会继续执行, &lt;code>set -e&lt;/code>使得脚本只要发生错误, 就中止执行&lt;/p>
&lt;h3 id="set--o-pipefail">&lt;code>set -o pipefail&lt;/code>&lt;/h3>
&lt;p>&lt;code>set -e&lt;/code>有一个例外情况, 就是不适用于管道命令, 比如下面的不会退出&lt;/p>
&lt;pre>&lt;code class="language-bash">#!/bin/bash
set -e

foo | echo a
echo bar
&lt;/code>&lt;/pre>
&lt;p>执行的结果为:&lt;/p>
&lt;pre>&lt;code class="language-bash">a
set.sh: line 4: foo: command not found
bar
&lt;/code>&lt;/pre>
&lt;p>&lt;code>set -o pipefail&lt;/code>可以解决这个问题, 只要一个子命令失败, 整个管道命令就失败, 脚本就会终止执行&lt;/p></description></item><item><title>OpenWrt</title><link>/posts/openwrt/</link><pubDate>Sat, 06 Jan 2024 17:38:38 +0800</pubDate><guid>/posts/openwrt/</guid><description>&lt;p>很久没折腾&lt;code>OpenWrt&lt;/code>了, 囊中羞涩, 没有其他合适的设备, 这次是在KVM虚机中运行使用(&lt;code>ALL IN BOOM!&lt;/code>)&lt;/p>
&lt;p>先亮个当前的穷人版家庭网络拓扑图&lt;/p>
&lt;p>&lt;img src="/posts/linux/imgs/home-network-topology-diagram.svg" alt="穷人版家庭网络拓扑图">&lt;/p>
&lt;h2 id="准备qcow2镜像">准备&lt;code>qcow2&lt;/code>镜像&lt;/h2>
&lt;p>首先下载最新的&lt;a href="https://downloads.openwrt.org/releases">镜像&lt;/a>, 截止目前最新版为&lt;code>23.05.3&lt;/code>, 我这里下载的是x86-64的镜像&lt;/p>
&lt;pre>&lt;code class="language-bash">wget https://mirror-03.infra.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-23.05.3-x86-64-generic-ext4-combined.img.gz
# 解压
gunzip openwrt-23.05.3-x86-64-generic-ext4-combined.img.gz
# 这里因为我要作为KVM虚拟机的镜像, 所以转换为qcow2格式. 如果是在物理机上部署, 可以直接直接刷到U盘上.
qemu-img convert -f raw openwrt-23.05.3-x86-64-generic-ext4-combined.img -O qcow2 /var/lib/libvirt/images/openwrt.qcow2
&lt;/code>&lt;/pre>
&lt;h2 id="运行虚机">运行虚机&lt;/h2>
&lt;p>我是用&lt;code>libvirt&lt;/code>来管理qemu/kvm虚拟机, 如果没安装要先安装&lt;/p>
&lt;pre>&lt;code class="language-bash">apt install virt-manager qemu bridge-utils -y
&lt;/code>&lt;/pre>
&lt;p>我这里将镜像复制到了&lt;code>/var/lib/libvirt/disks/&lt;/code>目录下&lt;/p>
&lt;pre>&lt;code class="language-bash">qemu-img create -f qcow2 -F qcow2 -b /var/lib/libvirt/images/openwrt.qcow2 /var/lib/libvirt/disks/openwrt.qcow2 1G
&lt;/code>&lt;/pre>
&lt;p>使用&lt;code>virt-install&lt;/code>运行虚拟机, 这里网卡使用&lt;code>virtio&lt;/code>类型并桥接到之前文档里创建的&lt;code>br0&lt;/code>上,
选择&lt;code>virtio&lt;/code>是因为性能最好, 可以达到&lt;code>10Gbps&lt;/code>以上&lt;/p>
&lt;pre>&lt;code class="language-bash"># 运行, 这里网络指定的之前文章中创建的网桥网络br0
virt-install \
 --name openwrt \
 --memory 256 \
 --vcpus 1 \
 --network bridge=br0,model=virtio \
 --disk path=/var/lib/libvirt/disks/openwrt.qcow2,bus=ide \
 --import \
 --autostart \
 --osinfo detect=on,require=off \
 --noautoconsole
&lt;/code>&lt;/pre>
&lt;h2 id="配置网络">配置网络&lt;/h2>
&lt;p>连接&lt;code>console&lt;/code>配置网络&lt;/p></description></item><item><title>dhclient</title><link>/posts/dhclient/</link><pubDate>Mon, 09 Oct 2023 21:37:55 +0800</pubDate><guid>/posts/dhclient/</guid><description>&lt;p>在机器上使用&lt;code>netplan&lt;/code>+&lt;code>NetworkManager&lt;/code>配置&lt;a href="../creating-a-bridged-network-with-netplan-on-ubuntu-22-04">bridged network&lt;/a>之后&lt;/p>
&lt;p>最近经常电脑用着用着就不能联网了，发现&lt;code>enp1s0&lt;/code>总是偶尔冒出一个&lt;code>ipv4&lt;/code>地址，并且路由表会多出一个从&lt;code>enp1s0&lt;/code>出去的&lt;code>default&lt;/code>路由。后来看&lt;code>journalctl&lt;/code>日志发现是&lt;code>dhclient&lt;/code>搞的事情(学艺不精, 没第一时间联系起来)。&lt;/p>
&lt;p>下面是部分日志：&lt;/p>
&lt;pre>&lt;code class="language-bash">➜ ~ journalctl -n 1000000 | grep '192.168.1.22\|enp1s0'
...
10月 09 20:14:25 gobai-SER dhclient[107299]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x4745a8ce)
10月 09 20:14:26 gobai-SER dhclient[73666]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x2cfc74b3)
10月 09 20:14:26 gobai-SER dhclient[157839]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x453b8549)
10月 09 20:14:28 gobai-SER dhclient[170251]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x334a15e8)
10月 09 20:14:28 gobai-SER dhclient[237127]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x7fd24947)
10月 09 20:14:32 gobai-SER avahi-autoipd(enp1s0)[307826]: Found user 'avahi-autoipd' (UID 110) and group 'avahi-autoipd' (GID 119).
10月 09 20:14:32 gobai-SER avahi-autoipd(enp1s0)[307826]: Successfully called chroot().
10月 09 20:14:32 gobai-SER avahi-autoipd(enp1s0)[307826]: Successfully dropped root privileges.
10月 09 20:14:32 gobai-SER avahi-autoipd(enp1s0)[307826]: Starting with address 169.254.4.220
10月 09 20:14:32 gobai-SER avahi-autoipd(enp1s0)[307826]: Got SIGTERM, quitting.
10月 09 20:14:32 gobai-SER dhclient[170251]: DHCPDISCOVER on enp1s0 to 255.255.255.255 port 67 interval 3 (xid=0x1f69d35f)
10月 09 20:14:32 gobai-SER dhclient[170251]: DHCPOFFER of 192.168.1.22 from 192.168.1.1
10月 09 20:14:32 gobai-SER dhclient[170251]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x5fd3691f)
10月 09 20:14:32 gobai-SER dhclient[170251]: DHCPACK of 192.168.1.22 from 192.168.1.1 (xid=0x1f69d35f)
10月 09 20:14:32 gobai-SER avahi-daemon[588]: Joining mDNS multicast group on interface enp1s0.IPv4 with address 192.168.1.22.
10月 09 20:14:32 gobai-SER avahi-daemon[588]: New relevant interface enp1s0.IPv4 for mDNS.
10月 09 20:14:32 gobai-SER avahi-daemon[588]: Registering new address record for 192.168.1.22 on enp1s0.IPv4.
10月 09 20:14:32 gobai-SER systemd-resolved[237121]: enp1s0: Bus client set search domain list to: home
10月 09 20:14:32 gobai-SER dhclient[157839]: DHCPDISCOVER on enp1s0 to 255.255.255.255 port 67 interval 3 (xid=0x41cc913f)
10月 09 20:14:32 gobai-SER systemd-resolved[237121]: enp1s0: Bus client set DNS server list to: 192.168.1.1, 223.5.5.5
10月 09 20:14:32 gobai-SER dhclient[157839]: DHCPOFFER of 192.168.1.22 from 192.168.1.1
10月 09 20:14:32 gobai-SER dhclient[157839]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x3f91cc41)
10月 09 20:14:32 gobai-SER dhclient[157839]: DHCPACK of 192.168.1.22 from 192.168.1.1 (xid=0x41cc913f)
10月 09 20:14:32 gobai-SER dhclient[170251]: bound to 192.168.1.22 -- renewal in 32921 seconds.
10月 09 20:14:32 gobai-SER dhclient[157839]: bound to 192.168.1.22 -- renewal in 36989 seconds.
10月 09 20:14:35 gobai-SER avahi-daemon[588]: Withdrawing address record for 192.168.1.22 on enp1s0.
10月 09 20:14:35 gobai-SER avahi-daemon[588]: Leaving mDNS multicast group on interface enp1s0.IPv4 with address 192.168.1.22.
10月 09 20:14:35 gobai-SER avahi-daemon[588]: Interface enp1s0.IPv4 no longer relevant for mDNS.
10月 09 20:14:35 gobai-SER avahi-autoipd(enp1s0)[307982]: Found user 'avahi-autoipd' (UID 110) and group 'avahi-autoipd' (GID 119).
10月 09 20:14:35 gobai-SER avahi-autoipd(enp1s0)[307982]: Successfully called chroot().
10月 09 20:14:35 gobai-SER avahi-autoipd(enp1s0)[307982]: Successfully dropped root privileges.
10月 09 20:14:35 gobai-SER avahi-autoipd(enp1s0)[307982]: Starting with address 169.254.4.220
10月 09 20:14:35 gobai-SER avahi-autoipd(enp1s0)[307982]: Got SIGTERM, quitting.
10月 09 20:14:36 gobai-SER dhclient[73666]: DHCPDISCOVER on enp1s0 to 255.255.255.255 port 67 interval 3 (xid=0x50a89e0e)
10月 09 20:14:36 gobai-SER dhclient[73666]: DHCPOFFER of 192.168.1.22 from 192.168.1.1
10月 09 20:14:36 gobai-SER dhclient[73666]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0xe9ea850)
10月 09 20:14:36 gobai-SER dhclient[73666]: DHCPACK of 192.168.1.22 from 192.168.1.1 (xid=0x50a89e0e)
10月 09 20:14:36 gobai-SER avahi-daemon[588]: Joining mDNS multicast group on interface enp1s0.IPv4 with address 192.168.1.22.
10月 09 20:14:36 gobai-SER avahi-daemon[588]: New relevant interface enp1s0.IPv4 for mDNS.
10月 09 20:14:36 gobai-SER avahi-daemon[588]: Registering new address record for 192.168.1.22 on enp1s0.IPv4.
10月 09 20:14:36 gobai-SER systemd-resolved[237121]: enp1s0: Bus client set search domain list to: home
10月 09 20:14:36 gobai-SER systemd-resolved[237121]: enp1s0: Bus client set DNS server list to: 192.168.1.1, 223.5.5.5
10月 09 20:14:36 gobai-SER dhclient[73666]: bound to 192.168.1.22 -- renewal in 34351 seconds.
10月 09 20:14:36 gobai-SER dhclient[107299]: DHCPDISCOVER on enp1s0 to 255.255.255.255 port 67 interval 3 (xid=0x27725347)
10月 09 20:14:36 gobai-SER dhclient[107299]: DHCPOFFER of 192.168.1.22 from 192.168.1.1
10月 09 20:14:36 gobai-SER dhclient[107299]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x47537227)
10月 09 20:14:36 gobai-SER dhclient[107299]: DHCPACK of 192.168.1.22 from 192.168.1.1 (xid=0x27725347)
10月 09 20:14:36 gobai-SER dhclient[107299]: bound to 192.168.1.22 -- renewal in 40122 seconds.
10月 09 20:14:36 gobai-SER avahi-daemon[588]: Withdrawing address record for 192.168.1.22 on enp1s0.
10月 09 20:14:36 gobai-SER avahi-daemon[588]: Leaving mDNS multicast group on interface enp1s0.IPv4 with address 192.168.1.22.
10月 09 20:14:36 gobai-SER avahi-daemon[588]: Interface enp1s0.IPv4 no longer relevant for mDNS.
10月 09 20:14:36 gobai-SER avahi-autoipd(enp1s0)[308110]: Found user 'avahi-autoipd' (UID 110) and group 'avahi-autoipd' (GID 119).
10月 09 20:14:36 gobai-SER avahi-autoipd(enp1s0)[308110]: Successfully called chroot().
10月 09 20:14:36 gobai-SER avahi-autoipd(enp1s0)[308110]: Successfully dropped root privileges.
10月 09 20:14:36 gobai-SER avahi-autoipd(enp1s0)[308110]: Starting with address 169.254.4.220
10月 09 20:14:42 gobai-SER avahi-autoipd(enp1s0)[308110]: Callout BIND, address 169.254.4.220 on interface enp1s0
10月 09 20:14:42 gobai-SER avahi-daemon[588]: Joining mDNS multicast group on interface enp1s0.IPv4 with address 169.254.4.220.
10月 09 20:14:42 gobai-SER avahi-daemon[588]: New relevant interface enp1s0.IPv4 for mDNS.
10月 09 20:14:42 gobai-SER avahi-daemon[588]: Registering new address record for 169.254.4.220 on enp1s0.IPv4.
10月 09 20:14:46 gobai-SER avahi-autoipd(enp1s0)[308110]: Successfully claimed IP address 169.254.4.220
10月 09 20:14:46 gobai-SER avahi-autoipd(enp1s0)[308110]: Got SIGTERM, quitting.
10月 09 20:14:46 gobai-SER avahi-autoipd(enp1s0)[308110]: Callout STOP, address 169.254.4.220 on interface enp1s0
10月 09 20:14:46 gobai-SER avahi-daemon[588]: Withdrawing address record for 169.254.4.220 on enp1s0.
10月 09 20:14:46 gobai-SER avahi-daemon[588]: Leaving mDNS multicast group on interface enp1s0.IPv4 with address 169.254.4.220.
10月 09 20:14:46 gobai-SER avahi-daemon[588]: Interface enp1s0.IPv4 no longer relevant for mDNS.
10月 09 20:14:46 gobai-SER dhclient[237127]: DHCPDISCOVER on enp1s0 to 255.255.255.255 port 67 interval 3 (xid=0x389e944d)
10月 09 20:14:46 gobai-SER dhclient[237127]: DHCPOFFER of 192.168.1.22 from 192.168.1.1
10月 09 20:14:46 gobai-SER dhclient[237127]: DHCPREQUEST for 192.168.1.22 on enp1s0 to 255.255.255.255 port 67 (xid=0x4d949e38)
10月 09 20:14:46 gobai-SER dhclient[237127]: DHCPACK of 192.168.1.22 from 192.168.1.1 (xid=0x389e944d)
10月 09 20:14:46 gobai-SER avahi-daemon[588]: Joining mDNS multicast group on interface enp1s0.IPv4 with address 192.168.1.22.
10月 09 20:14:46 gobai-SER avahi-daemon[588]: New relevant interface enp1s0.IPv4 for mDNS.
10月 09 20:14:46 gobai-SER avahi-daemon[588]: Registering new address record for 192.168.1.22 on enp1s0.IPv4.
10月 09 20:14:47 gobai-SER systemd-resolved[237121]: enp1s0: Bus client set search domain list to: home
10月 09 20:14:47 gobai-SER systemd-resolved[237121]: enp1s0: Bus client set DNS server list to: 192.168.1.1, 223.5.5.5
10月 09 20:14:47 gobai-SER dhclient[237127]: bound to 192.168.1.22 -- renewal in 40782 seconds.

➜ ~ ps -aux | grep dhclient
root 73666 0.0 0.0 101232 6228 ? Ssl 9月28 0:15 dhclient
root 107299 0.0 0.0 101232 6228 ? Ssl 10月04 0:09 dhclient
root 157839 0.0 0.0 101232 6112 ? Ssl 10月06 0:06 dhclient
root 170251 0.0 0.0 101232 6184 ? Ssl 10月06 0:08 dhclient
root 237127 0.0 0.0 101232 6012 ? Ssl 10月07 0:06 dhclient
gobai 322905 0.0 0.0 12308 2816 pts/5 S+ 21:49 0:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox dhclient
&lt;/code>&lt;/pre>
&lt;p>对比上面五个进程(&lt;code>DHCP Client&lt;/code>)和日志发现，五个进程都干了同样的事：&lt;/p></description></item><item><title>在 Ubuntu 22.04 使用 netplan 创建桥接网络</title><link>/posts/creating-a-bridged-network-with-netplan-on-ubuntu-22-04/</link><pubDate>Wed, 04 Oct 2023 13:01:59 +0800</pubDate><guid>/posts/creating-a-bridged-network-with-netplan-on-ubuntu-22-04/</guid><description>&lt;p>本地LAN环境&lt;/p>
&lt;ol>
&lt;li>LAN网关 &lt;code>192.168.1.1&lt;/code>&lt;/li>
&lt;li>子网掩码 &lt;code>255.255.255.0&lt;/code>&lt;/li>
&lt;li>DHCP范围 &lt;code>192.168.1.2&lt;/code>-&lt;code>192.168.32&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="创建一个bridged-network">创建一个&lt;code>bridged network&lt;/code>&lt;/h2>
&lt;p>创建一个网桥&lt;code>br0&lt;/code>给虚机使用，使得虚机和其他设备都在一个LAN下&lt;/p>
&lt;p>总配置(&lt;code>netplan get&lt;/code>)如下:&lt;/p>
&lt;pre>&lt;code class="language-yaml">network:
 version: 2
 renderer: NetworkManager
 ethernets:
 enp1s0:
 dhcp4: false
 dhcp6: false
 bridges:
 br0:
 addresses:
 - &amp;quot;192.168.1.100/24&amp;quot;
 nameservers:
 addresses:
 - 192.168.1.1
 dhcp4: false
 dhcp6: false
 interfaces:
 - enp1s0
 parameters:
 stp: false
 routes:
 - to: &amp;quot;default&amp;quot;
 via: &amp;quot;192.168.1.1&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>由三个文件组成:&lt;/p>
&lt;ol>
&lt;li>&lt;code>/etc/netplan/01-network-manager-all.yaml&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml"># Let NetworkManager manage all devices on this system
network:
 version: 2
 renderer: NetworkManager
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>&lt;code>/etc/netplan/10-ethernet-enp1s0.yaml&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">network:
 ethernets:
 enp1s0:
 dhcp4: false
 dhcp6: false
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>&lt;code>/etc/netplan/99-bridged-network-br0.yaml&lt;/code>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-yaml">network:
 bridges:
 br0:
 dhcp4: false
 dhcp6: false
 addresses:
 - 192.168.1.100/24
 routes:
 - to: default
 via: 192.168.1.1
 nameservers:
 addresses: 
 - 192.168.1.1
 - 223.5.5.5
 interfaces:
 - enp1s0
 parameters:
 stp: false
&lt;/code>&lt;/pre>
&lt;h2 id="应用网络配置">应用网络配置&lt;/h2>
&lt;p>容易失联，如果是ssh远程操作请谨慎操作&lt;/p></description></item><item><title>删除分区并扩容另一个分区和根文件系统</title><link>/posts/delete-partition-and-expand-another/</link><pubDate>Mon, 02 Oct 2023 16:54:05 +0800</pubDate><guid>/posts/delete-partition-and-expand-another/</guid><description>&lt;blockquote>
&lt;p>现在要将 &lt;code>/dev/sda3&lt;/code> 分区删掉并扩容到 &lt;code>/dev/sda2&lt;/code>, 并且在不重启服务器的情况下扩容根文件系统(跟文件系统 &lt;code>/&lt;/code> 挂载在 &lt;code>/dev/sda2&lt;/code> 上, 并且 filesystem 是 &lt;code>ext4&lt;/code>)&lt;/p>
&lt;/blockquote>
&lt;h2 id="磁盘初始分区和挂载情况">磁盘初始分区和挂载情况&lt;/h2>
&lt;pre>&lt;code class="language-bash">➜ ~ lsblk /dev/sda
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
sda 8:0 0 100G 0 disk 
├─sda1 8:1 0 512M 0 part /boot/efi
├─sda2 8:2 0 98.5G 0 part /
└─sda3 8:3 0 976M 0 part 

➜ ~ fdisk -l /dev/sda
Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors
Disk model: BlockVolume 
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 1048576 bytes
Disklabel type: gpt
Disk identifier: 40BED670-8B91-4520-9785-DB1F1035C039

Device Start End Sectors Size Type
/dev/sda1 2048 1050623 1048576 512M EFI System
/dev/sda2 1050624 207714303 206663680 98.5G Linux filesystem
/dev/sda3 207714304 209713151 1998848 976M Linux swap

➜ ~ df -hT /dev/sda2
Filesystem Type Size Used Avail Use% Mounted on
/dev/sda2 ext4 97G 28G 64G 31% /
&lt;/code>&lt;/pre>
&lt;h2 id="删除分区-devsda3">删除分区 &lt;code>/dev/sda3&lt;/code>&lt;/h2>
&lt;pre>&lt;code class="language-bash">➜ ~ fdisk /dev/sda

Welcome to fdisk (util-linux 2.36.1).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): d
Partition number (1-3, default 3): 3

Partition 3 has been deleted.

Command (m for help): p
Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors
Disk model: BlockVolume 
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 1048576 bytes
Disklabel type: gpt
Disk identifier: 40BED670-8B91-4520-9785-DB1F1035C039

Device Start End Sectors Size Type
/dev/sda1 2048 1050623 1048576 512M EFI System
/dev/sda2 1050624 207714303 206663680 98.5G Linux filesystem

Command (m for help): w # 保存退出
The partition table has been altered.
Syncing disks.
&lt;/code>&lt;/pre>
&lt;h2 id="扩容分区-devsda2-和-根文件系统">扩容分区 &lt;code>/dev/sda2&lt;/code> 和 根文件系统&lt;/h2>
&lt;p>使用 &lt;code>fdisk&lt;/code> 扩容 &lt;code>/dev/sda2&lt;/code>, 前提是 &lt;code>/dev/sda2&lt;/code> 后面没有其他分区了，可以这样扩容(先删除不退出并重建分区, 分区 &lt;code>Start&lt;/code> 不变, &lt;code>End&lt;/code> 增大)&lt;/p></description></item><item><title>About Systemd</title><link>/posts/systemd-journal/</link><pubDate>Sun, 14 Nov 2021 01:47:04 +0800</pubDate><guid>/posts/systemd-journal/</guid><description>&lt;p>记录一下查看和操作 &lt;code>systemd&lt;/code> 日志的几个常用命令&lt;/p>
&lt;h2 id="常用过滤日志日志的命令">常用过滤日志日志的命令&lt;/h2>
&lt;h3 id="根据时间约束过滤日志">根据时间约束过滤日志&lt;/h3>
&lt;h4 id="获取-2023-01-15-000000-之后的日志">获取 &lt;code>2023-01-15 00:00:00&lt;/code> 之后的日志&lt;/h4>
&lt;pre>&lt;code class="language-bash">journalctl --since '2023-01-15 00:00:00'
&lt;/code>&lt;/pre>
&lt;h4 id="获取-2023-01-15-000000-之后-2023-01-15-120000-之前的日志">获取 &lt;code>2023-01-15 00:00:00&lt;/code> 之后, &lt;code>2023-01-15 12:00:00&lt;/code> 之前的日志&lt;/h4>
&lt;pre>&lt;code class="language-bash">journalctl --since '2023-01-15 00:00:00' --until '2023-01-15 12:00:00'
&lt;/code>&lt;/pre>
&lt;h3 id="只查看一个服务unit的日志">只查看一个服务(Unit)的日志&lt;/h3>
&lt;pre>&lt;code class="language-bash">journalctl -u nginx
&lt;/code>&lt;/pre>
&lt;h3 id="自由组合约束条件">自由组合约束条件&lt;/h3>
&lt;pre>&lt;code class="language-bash">journalctl -u nginx --since '2023-01-15 00:00:00' --until '2023-01-15 12:00:00'
&lt;/code>&lt;/pre>
&lt;h2 id="查看日志占用磁盘量">查看日志占用磁盘量&lt;/h2>
&lt;pre>&lt;code class="language-bash">journalctl --disk-usage
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-bash">Output
Archived and active journals take up 3.9G in the file system.
&lt;/code>&lt;/pre>
&lt;h2 id="删除旧的日志">删除旧的日志&lt;/h2>
&lt;h3 id="只保留最近-一个月-的日志">只保留最近 &lt;code>一个月&lt;/code> 的日志&lt;/h3>
&lt;pre>&lt;code class="language-bash">journalctl --vacuum-time=1month
&lt;/code>&lt;/pre>
&lt;h3 id="只保留最近-1g-的日志">只保留最近 &lt;code>1G&lt;/code> 的日志&lt;/h3>
&lt;pre>&lt;code class="language-bash">journalctl --vacuum-size=1G
&lt;/code>&lt;/pre>
&lt;h2 id="列出所有systemd服务">列出所有systemd服务&lt;/h2>
&lt;pre>&lt;code class="language-bash">systemctl list-units --type=service --all
&lt;/code>&lt;/pre></description></item></channel></rss>