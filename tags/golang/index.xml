<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on gobai's blog</title><link>/tags/golang/</link><description>Recent content in Golang on gobai's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 09 Mar 2024 10:49:09 +0800</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>sqlx vs xorm</title><link>/posts/sqlx-vs-xorm/</link><pubDate>Sat, 09 Mar 2024 10:49:09 +0800</pubDate><guid>/posts/sqlx-vs-xorm/</guid><description>&lt;h2 id="初始化演示环境">初始化演示环境&lt;/h2>
&lt;h3 id="使用docker部署">使用docker部署&lt;/h3>
&lt;p>部署的当前时间最新版本&lt;code>postgres:16.2&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-bash">docker run -d --name pgsql \
 -e POSTGRES_USER=admin \
 -e POSTGRES_PASSWORD=passwd \
 -e POSTGRES_DB=testdb \
 -p 15432:5432 \
 postgres:16.2
&lt;/code>&lt;/pre>
&lt;h3 id="使用psql连接">使用&lt;code>psql&lt;/code>连接&lt;/h3>
&lt;pre>&lt;code class="language-bash">docker exec -it pgsql psql -U admin -d testdb
&lt;/code>&lt;/pre>
&lt;h3 id="初始化uservps和host表">初始化&lt;code>user&lt;/code>,&lt;code>vps&lt;/code>和&lt;code>host&lt;/code>表&lt;/h3>
&lt;pre>&lt;code class="language-sql">CREATE TABLE &amp;quot;user&amp;quot; (
 id bigserial PRIMARY KEY,
 username VARCHAR(255) NOT NULL,
 password VARCHAR(255) NOT NULL
);
CREATE TABLE &amp;quot;host&amp;quot; (
 id bigserial PRIMARY KEY,
 hostname VARCHAR(255) NOT NULL
);
CREATE TABLE &amp;quot;vps&amp;quot; (
 id bigserial PRIMARY KEY,
 user_id bigint NOT NULL,
 host_id bigint NOT NULL,
 name VARCHAR(255) NOT NULL,
 sys_disk jsonb NOT NULL DEFAULT '{}'
);
&lt;/code>&lt;/pr</description></item><item><title>解决Go应用在容器中的时区问题</title><link>/posts/solve-timezone-issue-in-go-application-in-container/</link><pubDate>Sat, 18 Feb 2023 16:12:01 +0800</pubDate><guid>/posts/solve-timezone-issue-in-go-application-in-container/</guid><description>&lt;h2 id="容器中的时区问题">容器中的时区问题&lt;/h2>
&lt;p>应用直接运行在服务器上需要设置服务器时区为东八区，现在很多应用都是部署在容器中了，同样也是要设置容器镜像的时区。&lt;/p>
&lt;p>许多容器镜像默认时区为 &lt;code>UTC&lt;/code> (&lt;a href="https://zh.wikipedia.org/zh-hans/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6">Coordinated Universal Time 协调世界时&lt;/a>)，比东八区慢八个小时，当程序涉及数据库写入操作或者日志记录等功能时就会有时间差。&lt;/p>
&lt;p>常规解决方案一般两大类&lt;/p>
&lt;ol>
&lt;li>build docker镜像时就把镜像内的时区设置为 &lt;code>Asia/Shanghai&lt;/code>&lt;/li>
&lt;li>运行容器时把本地时区正常的主机的时区配置文件挂载到容器。&lt;/li>
&lt;/ol>
&lt;h3 id="看一下-go-是如何读取时区文件并设置-timetime-的时区的">看一下 &lt;code>Go&lt;/code> 是如何读取时区文件并设置 &lt;code>time.Time&lt;/code> 的时区的&lt;/h3>
&lt;p>&lt;code>Go&lt;/code> 源码 &lt;a href="https://github.com/golang/go/blob/master/src/time/zoneinfo_unix.go">src/time/zoneinfo_unix.go&lt;/a> 中代码和注释都很清晰👍&lt;/p>
&lt;pre>&lt;code class="language-golang">package time

import (
 &amp;quot;syscall&amp;quot;
)

// Many systems use /usr/share/zoneinfo, Solaris 2 has
// /usr/share/lib/zoneinfo, IRIX 6 has /usr/lib/locale/TZ,
// NixOS has /etc/zoneinfo.
var platformZoneSources = []string{
 &amp;quot;/usr/share/zoneinfo/&amp;quot;,
 &amp;quot;/usr/share/lib/zoneinfo/&amp;quot;,
 &amp;quot;/usr/lib/locale/TZ/&amp;quot;,
 &amp;quot;/etc/zoneinfo&amp;quot;,
}

func initLocal() {
 // consult $TZ to find the time zone to use.
 // no $TZ means use the system default /etc/localtime.
 // $TZ=&amp;quot;&amp;quot; means use UTC.
 // $TZ=&amp;quot;foo&amp;quot; or $TZ=&amp;quot;:foo&amp;quot; if foo is an absolute path, then the file pointed
 // by foo will be used to initialize timezone; otherwise, file
 // /usr/share/zoneinfo/foo will be used.

 tz, ok := syscall.Getenv(&amp;quot;TZ&amp;quot;)
 switch {
 case !ok:
 z, err := loadLocation(&amp;quot;localtime&amp;quot;, []string{&amp;quot;/etc&amp;quot;})
 if err == nil {
 localLoc = *z
 localLoc.name = &amp;quot;Local&amp;quot;
 return
 }
 case tz != &amp;quot;&amp;quot;:
 if tz[0] == ':' {
 tz = tz[1:]
 }
 if tz != &amp;quot;&amp;quot; &amp;amp;&amp;amp; tz[0] == '/' {
 if z, err := loadLocation(tz, []string{&amp;quot;&amp;quot;}); err == nil {
 localLoc = *z
 if tz == &amp;quot;/etc/localtime&amp;quot; {
 localLoc.name = &amp;quot;Local&amp;quot;
 } else {
 localLoc.name = tz
 }
 return
 }
 } else if tz != &amp;quot;&amp;quot; &amp;amp;&amp;amp; tz != &amp;quot;UTC&amp;quot; {
 if z, err := loadLocation(tz, platformZoneSources); err == nil {
 localLoc = *z
 return
 }
 }
 }

 // Fall back to UTC.
 localLoc.name = &amp;quot;UTC&amp;quot;
}
&lt;/code>&lt;/pr</description></item><item><title>减小go程序编译后的体积</title><link>/posts/go-app-reduce-size/</link><pubDate>Mon, 22 Nov 2021 10:29:02 +0800</pubDate><guid>/posts/go-app-reduce-size/</guid><description>&lt;h2 id="编译经典程序">编译经典程序&lt;/h2>
&lt;h3 id="程序代码">程序代码&lt;/h3>
&lt;pre>&lt;code class="language-golang">package main

import &amp;quot;fmt&amp;quot;

func main() {
 fmt.Println(&amp;quot;Hello World.&amp;quot;)
}
&lt;/code>&lt;/pre>
&lt;h3 id="编译环境">编译环境&lt;/h3>
&lt;pre>&lt;code class="language-bash">$ go version
go version go1.16.7 linux/amd64
&lt;/code>&lt;/pre>
&lt;h2 id="0-直接编译">0. 直接编译&lt;/h2>
&lt;pre>&lt;code class="language-bash">$ go build -o helloword main.go
$ ls -lh helloword 
-rwxrwxr-x 1 gobai gobai 1.9M Nov 23 09:34 helloword
&lt;/code>&lt;/pre>
&lt;h2 id="1-修改编译选项">1. 修改编译选项&lt;/h2>
&lt;p>除去编译时带的符号表和调试信息&lt;/p>
&lt;pre>&lt;code class="language-bash">$ go build -ldflags=&amp;quot;-s -w&amp;quot; -o helloword main.go
$ ls -lh helloword 
-rwxrwxr-x 1 gobai gobai 1.3M Nov 23 09:38 helloword
&lt;/code>&lt;/pr</description></item></channel></rss>