<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on gobai's blog</title><link>/tags/golang/</link><description>Recent content in golang on gobai's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Feb 2023 16:12:01 +0800</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>解决Go应用在容器中的时区问题</title><link>/post/solve-timezone-issue-in-go-application-in-container/</link><pubDate>Sat, 18 Feb 2023 16:12:01 +0800</pubDate><guid>/post/solve-timezone-issue-in-go-application-in-container/</guid><description>容器中的时区问题 应用直接运行在服务器上需要设置服务器时区为东八区，现在很多应用都是部署在容器中了，同样也是要设置容器镜像的时区。
许多容器镜像默认时区为 UTC (Coordinated Universal Time 协调世界时)，比东八区慢八个小时，当程序涉及数据库写入操作或者日志记录等功能时就会有时间差。
常规解决方案一般两大类
build docker镜像时就把镜像内的时区设置为 Asia/Shanghai 运行容器时把本地时区正常的主机的时区配置文件挂载到容器。 看一下 Go 是如何读取时区文件并设置 time.Time 的时区的 Go 源码 src/time/zoneinfo_unix.go 中代码和注释都很清晰👍
package time import ( &amp;quot;syscall&amp;quot; ) // Many systems use /usr/share/zoneinfo, Solaris 2 has // /usr/share/lib/zoneinfo, IRIX 6 has /usr/lib/locale/TZ, // NixOS has /etc/zoneinfo. var platformZoneSources = []string{ &amp;quot;/usr/share/zoneinfo/&amp;quot;, &amp;quot;/usr/share/lib/zoneinfo/&amp;quot;, &amp;quot;/usr/lib/locale/TZ/&amp;quot;, &amp;quot;/etc/zoneinfo&amp;quot;, } func initLocal() { // consult $TZ to find the time zone to use. // no $TZ means use the system default /etc/localtime.</description></item><item><title>使用golang计算md5 sum</title><link>/post/how-to-calculate-md5-using-golang/</link><pubDate>Fri, 13 Jan 2023 00:50:19 +0800</pubDate><guid>/post/how-to-calculate-md5-using-golang/</guid><description>代码 package main import ( &amp;quot;crypto/md5&amp;quot; &amp;quot;encoding/hex&amp;quot; &amp;quot;fmt&amp;quot; ) func main() { str := `this is the file content` md5sum := md5.Sum([]byte(str)) fmt.Printf(&amp;quot;%x\n&amp;quot;, md5sum) fmt.Printf(&amp;quot;%s\n&amp;quot;, hex.EncodeToString(md5sum[:])) } 输出 $ go run main.go 89b4f1823325ce4530cc264cc758baa7 89b4f1823325ce4530cc264cc758baa7</description></item><item><title>减小go程序编译后的体积</title><link>/post/go-app-reduce-size/</link><pubDate>Mon, 22 Nov 2021 10:29:02 +0800</pubDate><guid>/post/go-app-reduce-size/</guid><description>编译经典程序 程序代码 package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello World.&amp;quot;) } 编译环境 $ go version go version go1.16.7 linux/amd64 0. 直接编译 $ go build -o helloword main.go $ ls -lh helloword -rwxrwxr-x 1 gobai gobai 1.9M Nov 23 09:34 helloword 1. 修改编译选项 除去编译时带的符号表和调试信息
$ go build -ldflags=&amp;quot;-s -w&amp;quot; -o helloword main.go $ ls -lh helloword -rwxrwxr-x 1 gobai gobai 1.3M Nov 23 09:38 helloword 2. 使用 UPX 对直接编译出的二进制使用 upx 进一步压缩</description></item></channel></rss>